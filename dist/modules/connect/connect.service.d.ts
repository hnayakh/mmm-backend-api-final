import { Connect } from '../master/entities/connect.entity';
import { UserBasic } from '../user/entities/user-basic.entity';
import { ConnectRepo } from './connect.repo';
import { RechargeHistoryDto } from './dtos/recharge-history.dto';
import { UserConnectDurationDto, UserConnectRequestDto } from './dtos/user-connect-duration.dto';
import { UserRequestDto } from './dtos/user-request.dto';
import { RechargeHistory } from './entities/recharge-history.entity';
import { UserConnectDurationLog } from './entities/user-connect-duration-log';
import { UserConnectDuration } from './entities/user-connect-duration.entity';
import { UserConnectLog } from './entities/user-connect-log.entity';
import { UserConnect } from './entities/user-connect.entity';
import { UserRequest } from './entities/user-request.entity';
export declare class ConnectService {
    private readonly connectRepo;
    constructor(connectRepo: ConnectRepo);
    updateUserConnects(userConnect: UserConnect, connectCount: number, userBasic: UserBasic, operation: string): Promise<{
        connectBalance: number;
        userBasic: UserBasic;
        id: string;
        createdAt: string;
        createdBy: string;
        updatedAt: string;
        updatedBy: string;
        isActive: boolean;
    } & UserConnect>;
    createUserConnects(connectCount: number, userBasic: UserBasic): Promise<UserConnect>;
    createUserConnectLogs(prevConnectBalance: number, currentConnectBalance: number, changeAmount: number, operation: number, reason: string, userBasic: UserBasic): Promise<UserConnectLog>;
    createRechargeHistory(input: RechargeHistoryDto, userBasic: UserBasic): Promise<RechargeHistory>;
    getRechargeHistory(userBasic: UserBasic): Promise<RechargeHistory[]>;
    getAllRechargeHistory(): Promise<RechargeHistory[]>;
    getAllUserRequest(): Promise<any>;
    getUserConnect(userBasic: UserBasic): Promise<UserConnect>;
    addConnectTransaction(userOneBasic: UserBasic, operation: number, externalId?: string): Promise<import("./entities/connect-transaction-entity").ConnectTransactionEntity>;
    createOrUpdateUserRequest(userRequestDto: UserRequestDto): Promise<UserRequest>;
    getUserRequestById(id: string): Promise<UserRequest>;
    getActiveSentRequest(userBasicId: string): Promise<UserRequest[]>;
    getActiveInvites(userBasicId: string): Promise<UserRequest[]>;
    getActiveConnections(userBasicId: string): Promise<UserRequest[]>;
    getUserRequestStatusForAppPrefAndFilter(userBasicId: string): Promise<UserRequest[]>;
    createUserConnectDuration(input: UserConnectDurationDto, masterConnect: Connect): Promise<UserConnectDuration>;
    createUserConnectDurationLog(input: UserConnectDurationDto, userConnectReqObj: UserConnectDuration): Promise<UserConnectDurationLog>;
    createUserConnectRequest(input: UserConnectRequestDto, masterConnect: Connect): Promise<UserConnectDuration>;
    updateUserConnectDuration(input: UserConnectDurationDto, masterConnect: Connect): Promise<{
        userOneBasicId: string;
        userTwoBasicId: string;
        usedDuration: number;
        totalDuration: number;
        isFirstTime: boolean;
        userConnectDurationLogs: UserConnectDurationLog[];
        id: string;
        createdAt: string;
        createdBy: string;
        updatedAt: string;
        updatedBy: string;
        isActive: boolean;
    } & UserConnectDuration>;
    updateUserConnectRequest(input: UserConnectRequestDto, masterConnect: Connect): Promise<{
        userOneBasicId: string;
        userTwoBasicId: string;
        usedDuration: number;
        totalDuration: number;
        isFirstTime: boolean;
        userConnectDurationLogs: UserConnectDurationLog[];
        id: string;
        createdAt: string;
        createdBy: string;
        updatedAt: string;
        updatedBy: string;
        isActive: boolean;
    } & UserConnectDuration>;
    getUserConnectDurationByUserIdsActive(userOneBasicId: string, userTwoBasicId: string): Promise<UserConnectDuration[]>;
    getUserConnectDurationByUserIds(userOneBasicId: string, userTwoBasicId: string): Promise<UserConnectDuration[]>;
    getUserConnectRequestById(userConnectRequestId: string): Promise<UserConnectDuration>;
    getUserConnectRequestsByUserId(userBasicId: string): Promise<UserConnectDuration[]>;
    getUserConnectDurationAllUserActive(userOneBasicId: string): Promise<any>;
    getConnectTransactions(userBasicId: string): Promise<any>;
    getalluserConnectTransactions(): Promise<any>;
}
