import { UserRequestState, UserRequestStatus } from 'src/shared/enums/miscellaneous.enum';
import { Repository } from 'typeorm';
import { UserBasic } from '../user/entities/user-basic.entity';
import { ConnectTransactionEntity } from './entities/connect-transaction-entity';
import { RechargeHistory } from './entities/recharge-history.entity';
import { UserConnectDurationLog } from './entities/user-connect-duration-log';
import { UserConnectDuration } from './entities/user-connect-duration.entity';
import { UserConnectLog } from './entities/user-connect-log.entity';
import { UserConnect } from './entities/user-connect.entity';
import { UserRequest } from './entities/user-request.entity';
export declare class ConnectRepo {
    private readonly userConnectRepo;
    private readonly userConnectLogRepo;
    private readonly rechargeHistoryRepo;
    private readonly userRequestRepo;
    private readonly userConnectDurationRepo;
    private readonly userConnectDurationLogRepo;
    private readonly connectTransactionRepo;
    constructor(userConnectRepo: Repository<UserConnect>, userConnectLogRepo: Repository<UserConnectLog>, rechargeHistoryRepo: Repository<RechargeHistory>, userRequestRepo: Repository<UserRequest>, userConnectDurationRepo: Repository<UserConnectDuration>, userConnectDurationLogRepo: Repository<UserConnectDurationLog>, connectTransactionRepo: Repository<ConnectTransactionEntity>);
    createUserConnect(userConnect: UserConnect): Promise<UserConnect>;
    createUserConnectLog(userConnectLog: UserConnectLog): Promise<UserConnectLog>;
    getUserConnectByUserBasic(userBasic: UserBasic): Promise<UserConnect>;
    addConnectTransaction(userBasic: UserBasic, operation: number, externalId?: string): Promise<ConnectTransactionEntity>;
    getRechargeHistory(userBasic: UserBasic): Promise<RechargeHistory[]>;
    updateUserConnect(userConnect: UserConnect): Promise<{
        connectBalance: number;
        userBasic: UserBasic;
        id: string;
        createdAt: string;
        createdBy: string;
        updatedAt: string;
        updatedBy: string;
        isActive: boolean;
    } & UserConnect>;
    createRechargeHistory(rechargeHistory: RechargeHistory): Promise<RechargeHistory>;
    getRechargeHistoryByUserBasic(userBasic: UserBasic): Promise<RechargeHistory[]>;
    getAllRechargeHistory(): Promise<RechargeHistory[]>;
    getAllUserRequest(): Promise<any>;
    getUserRequestById(id: string): Promise<UserRequest>;
    updateUserRequest(userRequest: UserRequest): Promise<{
        requestingUserBasicId: string;
        requestedUserBasicId: string;
        userRequestStatus: UserRequestStatus;
        userRequestState: UserRequestState;
        requestDate: string;
        acceptanceRejectionDate: string;
        operation: number;
        id: string;
        createdAt: string;
        createdBy: string;
        updatedAt: string;
        updatedBy: string;
        isActive: boolean;
    } & UserRequest>;
    createUserRequest(userRequest: UserRequest): Promise<UserRequest>;
    getRequestValidation(requestedUserBasicId: string, requestingUserBasicId: string): Promise<UserRequest>;
    getUserRequestStatusForAppPrefAndFilter(userBasicId: string): Promise<UserRequest[]>;
    getActiveSentRequest(userBasicId: string): Promise<UserRequest[]>;
    getActiveInvites(userBasicId: string): Promise<UserRequest[]>;
    getActiveConnections(userBasicId: string): Promise<UserRequest[]>;
    createUserConnectDuration(userConnectDuration: UserConnectDuration): Promise<UserConnectDuration>;
    updateUserConnectDuration(userConnectDuration: UserConnectDuration): Promise<{
        userOneBasicId: string;
        userTwoBasicId: string;
        usedDuration: number;
        totalDuration: number;
        isFirstTime: boolean;
        userConnectDurationLogs: UserConnectDurationLog[];
        id: string;
        createdAt: string;
        createdBy: string;
        updatedAt: string;
        updatedBy: string;
        isActive: boolean;
    } & UserConnectDuration>;
    getConnectDurationById(userConnectDurationId: string): Promise<UserConnectDuration>;
    getUserConnectDurationByUserIds(userOneBasicId: string, userTwoBasicId: string): Promise<UserConnectDuration[]>;
    getUserConnectRequestsByUserId(userBasicId: string): Promise<UserConnectDuration[]>;
    getUserConnectDurationByUserIdsActive(userOneBasicId: string, userTwoBasicId: string): Promise<UserConnectDuration[]>;
    createUserConnectDurationLog(logObj: UserConnectDurationLog): Promise<UserConnectDurationLog>;
    getUserConnectRequestById(userConnectRequestId: string): Promise<UserConnectDuration>;
    getUserConnectDurationAllUserActive(userBasicId: string): Promise<any>;
    getmyTransactions(userBasicId: string): Promise<any>;
    getAllTransactions(): Promise<any>;
}
